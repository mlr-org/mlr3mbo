% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SurrogateLearner.R
\name{SurrogateLearner}
\alias{SurrogateLearner}
\title{Surrogate Model Containing a Single Learner}
\description{
Surrogate model containing a single \link[mlr3:LearnerRegr]{mlr3::LearnerRegr}.
}
\section{Parameters}{

\describe{
\item{\code{calc_insample_perf}}{\code{logical(1)}\cr
Should the insample performance of the \link[mlr3:LearnerRegr]{mlr3::LearnerRegr} be asserted after updating the surrogate?
If the assertion fails (i.e., the insample performance based on the \code{perf_measure} does not meet the
\code{perf_threshold}), an error is thrown.
Default is \code{FALSE}.
}
\item{\code{perf_measure}}{\link[mlr3:MeasureRegr]{mlr3::MeasureRegr}\cr
Performance measure which should be use to assert the insample performance of the \link[mlr3:LearnerRegr]{mlr3::LearnerRegr}.
Only relevant if \code{calc_insample_perf = TRUE}.
Default is \link[mlr3:mlr_measures_regr.rsq]{mlr3::mlr_measures_regr.rsq}.
}
\item{\code{perf_threshold}}{\code{numeric(1)}\cr
Threshold the insample performance of the \link[mlr3:LearnerRegr]{mlr3::LearnerRegr} should be asserted against.
Only relevant if \code{calc_insample_perf = TRUE}.
Default is \code{0}.
}
\item{\code{catch_errors}}{\code{logical(1)}\cr
Should errors during updating the surrogate be caught and propagated to the \code{loop_function} which can then handle
the failed infill optimization (as a result of the failed surrogate) appropriately by, e.g., proposing a randomly sampled point for evaluation?
Default is \code{TRUE}.
}
}
}

\section{Super class}{
\code{\link[mlr3mbo:Surrogate]{mlr3mbo::Surrogate}} -> \code{SurrogateLearner}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{print_id}}{(\code{character})\cr
Id used when printing.}

\item{\code{n_learner}}{(\code{integer(1)})\cr
Returns the number of \link[mlr3:Learner]{mlr3::Learner}s.}

\item{\code{assert_insample_perf}}{(\code{numeric(1)})\cr
Asserts whether the current insample performance meets the performance threshold.}

\item{\code{packages}}{(\code{character()})\cr
Set of required packages.}

\item{\code{feature_types}}{(\code{character()})\cr
Stores the feature types the learner can handle, e.g. \code{"logical"}, \code{"numeric"}, or \code{"factor"}.
A complete list of candidate feature types, grouped by task type, is stored in \code{\link[=mlr_reflections]{mlr_reflections$task_feature_types}}.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SurrogateLearner-new}{\code{SurrogateLearner$new()}}
\item \href{#method-SurrogateLearner-predict}{\code{SurrogateLearner$predict()}}
\item \href{#method-SurrogateLearner-clone}{\code{SurrogateLearner$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3mbo" data-topic="Surrogate" data-id="format"><a href='../../mlr3mbo/html/Surrogate.html#method-Surrogate-format'><code>mlr3mbo::Surrogate$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3mbo" data-topic="Surrogate" data-id="print"><a href='../../mlr3mbo/html/Surrogate.html#method-Surrogate-print'><code>mlr3mbo::Surrogate$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3mbo" data-topic="Surrogate" data-id="update"><a href='../../mlr3mbo/html/Surrogate.html#method-Surrogate-update'><code>mlr3mbo::Surrogate$update()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SurrogateLearner-new"></a>}}
\if{latex}{\out{\hypertarget{method-SurrogateLearner-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SurrogateLearner$new(learner, archive = NULL, x_cols = NULL, y_col = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{learner}}{(\link[mlr3:LearnerRegr]{mlr3::LearnerRegr}).}

\item{\code{archive}}{(\code{NULL} | \link[bbotk:Archive]{bbotk::Archive}).}

\item{\code{x_cols}}{(\code{NULL} | \code{character()}).}

\item{\code{y_col}}{(\code{NULL} | \code{character(1)}).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SurrogateLearner-predict"></a>}}
\if{latex}{\out{\hypertarget{method-SurrogateLearner-predict}{}}}
\subsection{Method \code{predict()}}{
Returns mean response and standard error.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SurrogateLearner$predict(xdt)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{xdt}}{(\code{\link[data.table:data.table]{data.table::data.table()}})\cr
New data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{\link[data.table:data.table]{data.table::data.table()}} with the columns \code{mean} and \code{se}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SurrogateLearner-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SurrogateLearner-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SurrogateLearner$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
