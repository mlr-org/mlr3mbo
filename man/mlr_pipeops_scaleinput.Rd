% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpScaleInput.R
\name{mlr_pipeops_scaleinput}
\alias{mlr_pipeops_scaleinput}
\alias{PipeOpScaleInput}
\title{Linearly Transform Numeric Input Features to the Unit Cube Based on Given Boundaries}
\format{
\code{\link{R6Class}} object inheriting from \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}/\code{\link[mlr3pipelines:PipeOpTaskPreproc]{PipeOpTaskPreproc}}/\code{\link[mlr3pipelines:PipeOp]{PipeOp}}.
}
\description{
Linearly transforms numeric input features to the unit cube based on specified lower and upper boundaries.
The same transformation is applied during training and prediction.
}
\section{Construction}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{PipeOpScaleInput$new(id = "scaleinput", param_vals = list())
}\if{html}{\out{</div>}}
\itemize{
\item \code{id} :: \code{character(1)}\cr
Identifier of resulting object, default \code{"scaleinput"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

Input and output channels are inherited from \code{\link[mlr3pipelines:PipeOpTaskPreproc]{PipeOpTaskPreproc}}.

The output is the input \code{\link[mlr3:Task]{Task}} with scaled numeric input features.
}

\section{State}{

The \verb{$state} is a named \code{list} with the \verb{$state} elements inherited from \code{\link[mlr3pipelines:PipeOpTaskPreproc]{PipeOpTaskPreproc}},
as well as a vector for each numeric input feature as stated by the search space containing the lower and upper bound.
}

\section{Parameters}{

The parameters are the parameters inherited from \code{\link[mlr3pipelines:PipeOpTaskPreproc]{PipeOpTaskPreproc}}, as well as:
\itemize{
\item \code{search_space} :: \code{\link[paradox:ParamSet]{ParamSet}}\cr
Search space containing the numeric input features as parameters.
}
}

\section{Methods}{

Only methods inherited from \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}}/\code{\link[mlr3pipelines:PipeOpTaskPreproc]{PipeOpTaskPreproc}}/\code{\link[mlr3pipelines:PipeOp]{PipeOp}}.
}

\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpTaskPreproc]{mlr3pipelines::PipeOpTaskPreproc}} -> \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{mlr3pipelines::PipeOpTaskPreprocSimple}} -> \code{PipeOpScaleInput}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpScaleInput-new}{\code{PipeOpScaleInput$new()}}
\item \href{#method-PipeOpScaleInput-clone}{\code{PipeOpScaleInput$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpScaleInput-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpScaleInput-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpScaleInput$new(id = "scaleinput", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
Identifier of resulting object, default \code{"scaleinput"}.}

\item{\code{param_vals}}{(names \code{list()})\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise be set during construction. Default \code{list()}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpScaleInput-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpScaleInput-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpScaleInput$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
