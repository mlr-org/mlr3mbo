% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bayesopt_mego.R
\name{bayesopt_mego}
\alias{bayesopt_mego}
\title{Sequential Multicriteria Bayesian Optimization via Multiple Acquisition Functions}
\usage{
bayesopt_mego(
  instance,
  init_design_size = NULL,
  surrogates = NULL,
  acq_functions = NULL,
  acq_optimizer = NULL,
  q = 1L
)
}
\arguments{
\item{instance}{(\link[bbotk:OptimInstanceMultiCrit]{bbotk::OptimInstanceMultiCrit})\cr
The \link[bbotk:OptimInstanceMultiCrit]{bbotk::OptimInstanceMultiCrit} to be optimized.}

\item{init_design_size}{(\code{NULL} | \code{integer(1)})\cr
Size of the initial design.
If \code{NULL} \code{4 * d} is used with \code{d} being the dimensionality of the search space.
Points are drawn uniformly at random.}

\item{surrogates}{(\code{NULL} | \code{lists} of \link{SurrogateLearner}s)\cr
\code{list} of \link{SurrogateLearner}s to be used as surrogates.
If \code{NULL}, multiple \code{default_surrogate(instance, n_learner = 1)} are used.}

\item{acq_functions}{(\code{NULL} | \code{list} of \link{AcqFunction}s).\cr
\code{list} of \link{AcqFunction}s to be used as acquisition functions.
If \code{NULL}, multiple \link{AcqFunctionEI}s are used.}

\item{acq_optimizer}{(\link{AcqOptimizer})\cr
\link{AcqOptimizer} to be used as acquisition function optimizer.
Must have multi-crit as a property.}

\item{q}{(\code{integer(1)})\cr
Limit to batch size, i.e., \code{q} pareto optimal candidates should be proposed for evaluation.
Note that the upper limit of the batch size is always given by the number of pareto optimal points found during optimization of the overall acquisition function.
If more pareto optimal candidates are available than \code{q} should be proposed, \code{q} potential candidates are choosen at random.
Default is \code{1}.}
}
\value{
invisible(instance)\cr
The original instance is modified in-place and returned invisible.
}
\description{
MBO loop function for multicriteria Bayesian optimization via multiple acquisition functions.
Acquisition functions are calculated separately per target variable and a multicriteria overall acquisition function is constructed internally.
This overall acquisition function is then optimized and a batch of pareto optimal candidates are proposed for evaluation.
Normally used inside an \link{OptimizerMbo}.
}
\note{
\itemize{
\item If not specified, the order of which \link{SurrogateLearner} and \link{AcqFunction} correspond to which target variable
is based on the \verb{$cols_y} field of the \verb{$archive} of the \code{instance}.
\item If \code{surrogates} is \code{NULL} but the \code{acq_functions} each contain a \verb{$surrogate}, these \link{SurrogateLearner}s are used.
\item You can pass \code{surrogates} that were not given the \link[bbotk:Archive]{bbotk::Archive} of the \code{instance} during initialization.
In this case, the \link[bbotk:Archive]{bbotk::Archive} of the given \code{instance} is set during execution.
\item Similarly, you can pass \code{acq_functions} that were not given a \code{surrogate} during initialization.
\item The actual multicriteria \code{acq_function} to be optimized by the \code{acq_optimizer} is constructed and set internally.
}
}
\examples{
library(bbotk)
library(paradox)
library(mlr3learners)

fun = function(xs) {
  list(y1 = xs$x^2, y2 = (xs$x - 2) ^ 2)
}
domain = ps(x = p_dbl(lower = -10, upper = 10))
codomain = ps(y1 = p_dbl(tags = "minimize"), y2 = p_dbl(tags = "minimize"))
objective = ObjectiveRFun$new(fun = fun, domain = domain, codomain = codomain)

terminator = trm("evals", n_evals = 5)

instance = OptimInstanceMultiCrit$new(
  objective = objective,
  terminator = terminator,
)

bayesopt_mego(instance)
}
\seealso{
Other Loop Function: 
\code{\link{bayesopt_ego}()},
\code{\link{bayesopt_ehvi}()},
\code{\link{bayesopt_mpcl}()},
\code{\link{bayesopt_parego}()},
\code{\link{bayesopt_smsego}()}
}
\concept{Loop Function}
