% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LearnerRegrLFBO.R
\name{mlr_learners_regr_lfbo}
\alias{mlr_learners_regr_lfbo}
\alias{LearnerRegrLFBO}
\title{Likelihood Free Bayesian Optimization Learner}
\description{
Wraps a classification learner to be used as a regression learner for
Likelihood-free Bayesian Optimization (LFBO).
}
\details{
The regression data is internally converted to a weighted classification task.
The new objective is a weighted version of a prediction problem, where the goal is
to predict whether a target value is smaller than a gamma quantile of the target
distribution (assuming minimization).

To specify the weighting type, set the value of the \code{lfbo.wt} parameter (\code{"ei"} or \code{"pi"}).
To specify the \code{gamma} quantile of the target distribution set the value of the \code{lfbo.gamma} parameter.
}
\examples{
\donttest{
if (requireNamespace("mlr3learners") &
    requireNamespace("ranger")) {

  library(bbotk)
  library(paradox)
  library(mlr3learners)

  fun = function(xs) {
    list(y = xs$x ^ 2)
  }
  domain = ps(x = p_dbl(lower = -10, upper = 10))
  codomain = ps(y = p_dbl(tags = "minimize"))
  objective = ObjectiveRFun$new(fun = fun, domain = domain, codomain = codomain)

  instance = OptimInstanceSingleCrit$new(
    objective = objective,
    terminator = trm("evals", n_evals = 5))

  surrogate = srlrn(lrn("regr.lfbo", lrn("classif.ranger")))

  acq_function = acqf("lfbo")

  acq_optimizer = acqo(
    optimizer = opt("random_search", batch_size = 100),
    terminator = trm("evals", n_evals = 100))

  optimizer = opt("mbo",
    loop_function = bayesopt_ego,
    surrogate = surrogate,
    acq_function = acq_function,
    acq_optimizer = acq_optimizer)

  optimizer$optimize(instance)
}
}
}
\references{
\itemize{
\item Song, Jiaming, Yu, Lantao, Neiswanger, Willie, Ermon, Stefano (2022).
\dQuote{A General Recipe for Likelihood-Free Bayesian Optimization.}
In Chaudhuri K, Jegelka S, Song L, Szepesvari C, Niu G, Sabato S (eds.), \emph{Proceedings of the 39th International Conference on Machine Learning}, volume 162, 20384--20404.
}
}
\section{Super classes}{
\code{\link[mlr3:Learner]{mlr3::Learner}} -> \code{\link[mlr3:LearnerRegr]{mlr3::LearnerRegr}} -> \code{LearnerRegrLFBO}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{learner_classif}}{(\link[mlr3:LearnerClassif]{mlr3::LearnerClassif})\cr
Classification learner to be used for LFBO.}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{surrogate_max_to_min}}{(\code{-1} | \code{1})\cr
Multiplicative factor to correct for minimization or maximization.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LearnerRegrLFBO-new}{\code{LearnerRegrLFBO$new()}}
\item \href{#method-LearnerRegrLFBO-train}{\code{LearnerRegrLFBO$train()}}
\item \href{#method-LearnerRegrLFBO-predict}{\code{LearnerRegrLFBO$predict()}}
\item \href{#method-LearnerRegrLFBO-clone}{\code{LearnerRegrLFBO$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="base_learner"><a href='../../mlr3/html/Learner.html#method-Learner-base_learner'><code>mlr3::Learner$base_learner()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="format"><a href='../../mlr3/html/Learner.html#method-Learner-format'><code>mlr3::Learner$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="help"><a href='../../mlr3/html/Learner.html#method-Learner-help'><code>mlr3::Learner$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="predict_newdata"><a href='../../mlr3/html/Learner.html#method-Learner-predict_newdata'><code>mlr3::Learner$predict_newdata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="print"><a href='../../mlr3/html/Learner.html#method-Learner-print'><code>mlr3::Learner$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3" data-topic="Learner" data-id="reset"><a href='../../mlr3/html/Learner.html#method-Learner-reset'><code>mlr3::Learner$reset()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerRegrLFBO-new"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerRegrLFBO-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this \link[R6:R6Class]{R6} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerRegrLFBO$new(learner_classif)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{learner_classif}}{(\link[mlr3:LearnerClassif]{mlr3::LearnerClassif})\cr
Classifcation learner to be used for LFBO.
Requires \code{predict_type = "prob"} which will be set automatically during construction.
Also requires the learner to be able to handle case weights, see \code{learner$properties}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerRegrLFBO-train"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerRegrLFBO-train}{}}}
\subsection{Method \code{train()}}{
Train the learner on a set of observations of the provided \code{task}.
Mutates the learner by reference, i.e. stores the model alongside other information in field \verb{$state}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerRegrLFBO$train(task, row_ids = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task}}{(\link{TaskRegr}).}

\item{\code{row_ids}}{(\code{integer()})\cr
Vector of training indices as subset of \code{task$row_ids}.
For a simple split into training and test set, see \code{\link[mlr3:partition]{mlr3::partition()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns the object itself, but modified \strong{by reference}.
You need to explicitly \verb{$clone()} the object beforehand if you want to keeps
the object in its previous state.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerRegrLFBO-predict"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerRegrLFBO-predict}{}}}
\subsection{Method \code{predict()}}{
Uses the information stored during \verb{$train()} in \verb{$learner$classif$state} to create a new \link[mlr3:PredictionRegr]{mlr3::PredictionRegr}
for a set of observations of the provided \code{task}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerRegrLFBO$predict(task, row_ids = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task}}{(\link[mlr3:TaskRegr]{mlr3::TaskRegr}).}

\item{\code{row_ids}}{(\code{integer()})\cr
Vector of test indices as subset of \code{task$row_ids}.
For a simple split into training and test set, see \code{\link[mlr3:partition]{mlr3::partition()}}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\link{PredictionRegr}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LearnerRegrLFBO-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LearnerRegrLFBO-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LearnerRegrLFBO$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
